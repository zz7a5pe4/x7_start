from __future__ import with_statement
from kombu.common import maybe_declare
from kombu.pools import producers
from kombu.connection import BrokerConnection
from kombu import Exchange, Queue

priority_to_routing_key = {"high": "hipri", "mid": "midpri","low": "lopri"}

task_exchange = Exchange("tasks", type="direct")
task_queues = [Queue("hipri", task_exchange, routing_key="hipri"),
               Queue("midpri", task_exchange, routing_key="midpri"),
               Queue("lopri", task_exchange, routing_key="lopri")]  

def send_as_task(connection, fun, args=(), kwargs={}, priority="mid"):
    payload = {"fun": fun, "args": args, "kwargs": kwargs}
    routing_key = priority_to_routing_key[priority]

    with producers[connection].acquire(block=True) as producer:
        maybe_declare(task_exchange, producer.channel)
        producer.publish(payload, serializer="pickle",
                                  compression="bzip2",
                                  routing_key=routing_key)

def hello_task(who="world"):
    print("Hello %s" % (who, ))

 